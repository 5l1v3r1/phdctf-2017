# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-05-10 18:50
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djchoices.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='E.g., potatoes, milk or carrot', max_length=100)),
                ('description', models.TextField(help_text='Detailed information about this food type')),
                ('unit', models.PositiveIntegerField(choices=[(1, 'Gram'), (2, 'Kilogram'), (3, 'Liter'), (4, 'Box'), (5, 'Package')], validators=[djchoices.choices.ChoicesValidator({1: 'Gram', 2: 'Kilogram', 3: 'Liter', 4: 'Box', 5: 'Package'})])),
                ('owner', models.ForeignKey(help_text='Owner of the food type', on_delete=django.db.models.deletion.CASCADE, related_name='food_types', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('added_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('what_to_do', models.TextField()),
                ('count', models.PositiveIntegerField(help_text='In units for this food', validators=[django.core.validators.MinValueValidator(1, 'You should use at least one unit of food')])),
                ('pause_after', models.PositiveIntegerField(help_text='In seconds')),
                ('food_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='refrigerator.FoodType')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='refrigerator.Recipe')),
            ],
        ),
        migrations.CreateModel(
            name='Refrigerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image_id', models.PositiveIntegerField()),
                ('owner', models.ForeignKey(help_text='Owner of the portable refrigerator', on_delete=django.db.models.deletion.CASCADE, related_name='refrigerators', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='fooditem',
            name='food_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='refrigerator.FoodType'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='refrigerator',
            field=models.ForeignKey(help_text='Refrigerator stored this food item', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='refrigerator.Refrigerator'),
        ),
        migrations.AlterUniqueTogether(
            name='recipeitem',
            unique_together=set([('recipe', 'food_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='fooditem',
            unique_together=set([('refrigerator', 'food_type')]),
        ),
    ]
